// <copyright file="CustomerTest.IsMinor.g.cs">Copyright ©  2011</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using Microsoft.Pex.Framework;

namespace Moles
{
    public partial class CustomerTest
    {
[TestMethod]
[PexGeneratedBy(typeof(CustomerTest))]
[HostType("Moles")]
public void IsMinor666()
{
    bool b;
    using (IPexObserveContext observer = PexObserve.NewTest())
    {
      Customer s0
         = new Customer(new DateTime(4611686018427387903L & 596762502556090369L, 
                                     (DateTimeKind)(596762502556090369uL >> 62)));
      b = this.IsMinor(s0);
      Assert.AreEqual<bool>(false, b);
      Assert.IsNotNull((object)s0);
      Assert.AreEqual<int>(25, s0.DateOfBirth.Day);
      Assert.AreEqual<DayOfWeek>(DayOfWeek.Monday, s0.DateOfBirth.DayOfWeek);
      Assert.AreEqual<int>(25, s0.DateOfBirth.DayOfYear);
      Assert.AreEqual<int>(8, s0.DateOfBirth.Hour);
      Assert.AreEqual<DateTimeKind>(DateTimeKind.Unspecified, s0.DateOfBirth.Kind);
      Assert.AreEqual<int>(609, s0.DateOfBirth.Millisecond);
      Assert.AreEqual<int>(10, s0.DateOfBirth.Minute);
      Assert.AreEqual<int>(1, s0.DateOfBirth.Month);
      Assert.AreEqual<int>(55, s0.DateOfBirth.Second);
      Assert.AreEqual<int>(1892, s0.DateOfBirth.Year);
      DateTime ovDateOfBirth = observer.GetObservedValue<DateTime>("DateOfBirth");
      Assert.AreEqual<int>(25, ovDateOfBirth.Day);
      Assert.AreEqual<DayOfWeek>(DayOfWeek.Monday, ovDateOfBirth.DayOfWeek);
      Assert.AreEqual<int>(25, ovDateOfBirth.DayOfYear);
      Assert.AreEqual<int>(8, ovDateOfBirth.Hour);
      Assert.AreEqual<DateTimeKind>(DateTimeKind.Unspecified, ovDateOfBirth.Kind);
      Assert.AreEqual<int>(609, ovDateOfBirth.Millisecond);
      Assert.AreEqual<int>(10, ovDateOfBirth.Minute);
      Assert.AreEqual<int>(1, ovDateOfBirth.Month);
      Assert.AreEqual<int>(55, ovDateOfBirth.Second);
      Assert.AreEqual<int>(1892, ovDateOfBirth.Year);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(CustomerTest))]
[HostType("Moles")]
public void IsMinor796()
{
    bool b;
    using (IPexObserveContext observer = PexObserve.NewTest())
    {
      Customer s0
         = new Customer(new DateTime(4611686018427387903L & 633363028442873856L, 
                                     (DateTimeKind)(633363028442873856uL >> 62)));
      b = this.IsMinor(s0);
      Assert.AreEqual<bool>(true, b);
      Assert.IsNotNull((object)s0);
      Assert.AreEqual<int>(19, s0.DateOfBirth.Day);
      Assert.AreEqual<DayOfWeek>(DayOfWeek.Saturday, s0.DateOfBirth.DayOfWeek);
      Assert.AreEqual<int>(19, s0.DateOfBirth.DayOfYear);
      Assert.AreEqual<int>(1, s0.DateOfBirth.Hour);
      Assert.AreEqual<DateTimeKind>(DateTimeKind.Unspecified, s0.DateOfBirth.Kind);
      Assert.AreEqual<int>(287, s0.DateOfBirth.Millisecond);
      Assert.AreEqual<int>(27, s0.DateOfBirth.Minute);
      Assert.AreEqual<int>(1, s0.DateOfBirth.Month);
      Assert.AreEqual<int>(24, s0.DateOfBirth.Second);
      Assert.AreEqual<int>(2008, s0.DateOfBirth.Year);
      DateTime ovDateOfBirth = observer.GetObservedValue<DateTime>("DateOfBirth");
      Assert.AreEqual<int>(19, ovDateOfBirth.Day);
      Assert.AreEqual<DayOfWeek>(DayOfWeek.Saturday, ovDateOfBirth.DayOfWeek);
      Assert.AreEqual<int>(19, ovDateOfBirth.DayOfYear);
      Assert.AreEqual<int>(1, ovDateOfBirth.Hour);
      Assert.AreEqual<DateTimeKind>(DateTimeKind.Unspecified, ovDateOfBirth.Kind);
      Assert.AreEqual<int>(287, ovDateOfBirth.Millisecond);
      Assert.AreEqual<int>(27, ovDateOfBirth.Minute);
      Assert.AreEqual<int>(1, ovDateOfBirth.Month);
      Assert.AreEqual<int>(24, ovDateOfBirth.Second);
      Assert.AreEqual<int>(2008, ovDateOfBirth.Year);
    }
}
    }
}
